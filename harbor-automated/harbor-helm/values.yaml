caSecretName: ""
cache:
    enabled: false
    expireHours: 24
containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
        drop:
            - ALL
    privileged: false
    runAsNonRoot: true
    seccompProfile:
        type: RuntimeDefault
core:
    affinity: {}
    artifactPullAsyncFlushDuration: null
    automountServiceAccountToken: false
    configureUserSettings: null
    existingSecret: ""
    existingXsrfSecret: ""
    existingXsrfSecretKey: CSRF_KEY
    extraEnvVars: []
    gdpr:
        auditLogsCompliant: false
        deleteUser: false
    image:
        repository: goharbor/harbor-core
        tag: v2.14.0
    initContainers: []
    nodeSelector: {}
    podAnnotations: {}
    podLabels: {}
    priorityClassName: null
    quotaUpdateProvider: db
    replicas: 1
    revisionHistoryLimit: 10
    secret: ""
    secretName: ""
    serviceAccountName: ""
    serviceAnnotations: {}
    startupProbe:
        enabled: true
        initialDelaySeconds: 10
    tokenCert: ""
    tokenKey: ""
    tolerations: []
    topologySpreadConstraints: []
    xsrfKey: ""
database:
    external:
        coreDatabase: registry
        existingSecret: ""
        host: 192.168.0.1
        password: password
        port: "5432"
        sslmode: disable
        username: user
    maxIdleConns: 100
    maxOpenConns: 900
    podAnnotations: {}
    podLabels: {}
    type: internal
enableMigrateHelmHook: false
existingSecretAdminPassword: ""
existingSecretAdminPasswordKey: HARBOR_ADMIN_PASSWORD
existingSecretSecretKey: ""
exporter:
    affinity: {}
    automountServiceAccountToken: false
    cacheCleanInterval: 14400
    cacheDuration: 23
    extraEnvVars: []
    image:
        repository: goharbor/harbor-exporter
        tag: v2.14.0
    nodeSelector: {}
    podAnnotations: {}
    podLabels: {}
    priorityClassName: null
    replicas: 1
    revisionHistoryLimit: 10
    serviceAccountName: ""
    tolerations: []
    topologySpreadConstraints: []
expose:
    clusterIP:
        annotations: {}
        labels: {}
        name: harbor
        ports:
            httpPort: 80
            httpsPort: 443
        staticClusterIP: ""
    ingress:
        annotations:
            ingress.kubernetes.io/proxy-body-size: "0"
            ingress.kubernetes.io/ssl-redirect: "true"
            nginx.ingress.kubernetes.io/proxy-body-size: "0"
            nginx.ingress.kubernetes.io/ssl-redirect: "true"
        className: ""
        controller: default
        hosts:
            core: core.harbor.domain
        kubeVersionOverride: ""
        labels: {}
    loadBalancer:
        IP: ""
        annotations: {}
        labels: {}
        name: harbor
        ports:
            httpPort: 80
            httpsPort: 443
        sourceRanges: []
    nodePort:
        annotations: {}
        labels: {}
        name: harbor
        ports:
            http:
                nodePort: 30002
                port: 80
            https:
                nodePort: 30003
                port: 443
    route:
        annotations: {}
        hosts: []
        labels: {}
        parentRefs: {}
    tls:
        auto:
            commonName: ""
        certSource: auto
        enabled: true
        secret:
            secretName: ""
    traefik:
        enabled: false
        host: harbor.example.com
        httpsRedirect:
            enabled: true
        middlewares: []
        tls:
            certResolver: ""
            enabled: true
            secretName: ""
    type: ingress
externalURL: https://core.harbor.domain
harborAdminPassword: Harbor12345
imageDigests:
    chartmuseum:
        digest: ""
    core:
        digest: ""
    exporter:
        digest: ""
    jobservice:
        digest: ""
    notary:
        server:
            digest: ""
        signer:
            digest: ""
    portal:
        digest: ""
    registry:
        digest: ""
    registryctl:
        digest: ""
    trivy:
        digest: ""
imagePullPolicy: IfNotPresent
imagePullSecrets: null
internalTLS:
    certSource: auto
    core:
        crt: ""
        key: ""
        secretName: ""
    enabled: false
    jobservice:
        crt: ""
        key: ""
        secretName: ""
    portal:
        crt: ""
        key: ""
        secretName: ""
    registry:
        crt: ""
        key: ""
        secretName: ""
    strong_ssl_ciphers: false
    trivy:
        crt: ""
        key: ""
        secretName: ""
    trustCa: ""
ipFamily:
    families: []
    ipv4:
        enabled: true
    ipv6:
        enabled: true
    policy: ""
jobservice:
    affinity: {}
    automountServiceAccountToken: false
    existingSecret: ""
    existingSecretKey: JOBSERVICE_SECRET
    extraEnvVars: []
    image:
        repository: goharbor/harbor-jobservice
        tag: v2.14.0
    initContainers: []
    jobLoggers:
        - file
    loggerSweeperDuration: 14
    maxJobWorkers: 10
    nodeSelector: {}
    notification:
        webhook_job_http_client_timeout: 3
        webhook_job_max_retry: 3
    podAnnotations: {}
    podLabels: {}
    priorityClassName: null
    reaper:
        max_dangling_hours: 168
        max_update_hours: 24
    replicas: 1
    revisionHistoryLimit: 10
    secret: ""
    serviceAccountName: ""
    tolerations: []
    topologySpreadConstraints: null
labels:
    common: {}
    overrides: {}
logLevel: info
metrics:
    core:
        path: /metrics
        port: 8001
    enabled: false
    exporter:
        path: /metrics
        port: 8001
    jobservice:
        path: /metrics
        port: 8001
    registry:
        path: /metrics
        port: 8001
    serviceMonitor:
        additionalLabels: {}
        enabled: false
        interval: ""
        metricRelabelings: []
        relabelings: []
nginx:
    affinity: {}
    automountServiceAccountToken: false
    extraEnvVars: []
    image:
        repository: goharbor/nginx-photon
        tag: v2.14.0
    nodeSelector: {}
    podAnnotations: {}
    podLabels: {}
    priorityClassName: null
    replicas: 1
    revisionHistoryLimit: 10
    serviceAccountName: ""
    tolerations: []
    topologySpreadConstraints: []
persistence:
    enabled: true
    imageChartStorage:
        azure:
            accountkey: base64encodedaccountkey
            accountname: accountname
            container: containername
            existingSecret: ""
        disableredirect: false
        filesystem:
            rootdirectory: /storage
        gcs:
            bucket: bucketname
            encodedkey: base64-encoded-json-key-file
            existingSecret: ""
            useWorkloadIdentity: false
        oss:
            accesskeyid: accesskeyid
            accesskeysecret: accesskeysecret
            bucket: bucketname
            existingSecret: ""
            region: regionname
        s3:
            bucket: bucketname
            region: us-west-1
        swift:
            authurl: https://storage.myprovider.com/v3/auth
            container: containername
            existingSecret: ""
            password: password
            username: username
        type: filesystem
    persistentVolumeClaim:
        database:
            accessMode: ReadWriteOnce
            annotations: {}
            existingClaim: ""
            size: 1Gi
            storageClass: ""
            subPath: ""
        jobservice:
            jobLog:
                accessMode: ReadWriteOnce
                annotations: {}
                existingClaim: ""
                size: 1Gi
                storageClass: ""
                subPath: ""
        redis:
            accessMode: ReadWriteOnce
            annotations: {}
            existingClaim: ""
            size: 1Gi
            storageClass: ""
            subPath: ""
        registry:
            accessMode: ReadWriteOnce
            annotations: {}
            existingClaim: ""
            size: 5Gi
            storageClass: ""
            subPath: ""
        trivy:
            accessMode: ReadWriteOnce
            annotations: {}
            existingClaim: ""
            size: 5Gi
            storageClass: ""
            subPath: ""
    resourcePolicy: keep
portal:
    affinity: {}
    automountServiceAccountToken: false
    extraEnvVars: []
    image:
        repository: goharbor/harbor-portal
        tag: v2.14.0
    initContainers: []
    nodeSelector: {}
    podAnnotations: {}
    podLabels: {}
    priorityClassName: null
    replicas: 1
    revisionHistoryLimit: 10
    serviceAccountName: ""
    serviceAnnotations: {}
    tolerations: []
    topologySpreadConstraints: []
proxy:
    components:
        - core
        - jobservice
        - trivy
    httpProxy: null
    httpsProxy: null
    noProxy: 127.0.0.1,localhost,.local,.internal
redis:
    external:
        addr: 192.168.0.2:6379
        coreDatabaseIndex: "0"
        existingSecret: ""
        jobserviceDatabaseIndex: "1"
        password: ""
        registryDatabaseIndex: "2"
        sentinelMasterSet: ""
        tlsOptions:
            enable: false
        trivyAdapterIndex: "5"
        username: ""
    internal:
        affinity: {}
        automountServiceAccountToken: false
        extraEnvVars: []
        image:
            repository: goharbor/redis-photon
            tag: v2.14.0
        initContainers: []
        jobserviceDatabaseIndex: "1"
        nodeSelector: {}
        priorityClassName: null
        registryDatabaseIndex: "2"
        serviceAccountName: ""
        tolerations: []
        trivyAdapterIndex: "5"
    podAnnotations: {}
    podLabels: {}
    type: internal
registry:
    affinity: {}
    automountServiceAccountToken: false
    controller:
        extraEnvVars: []
        image:
            repository: goharbor/harbor-registryctl
            tag: v2.14.0
    credentials:
        existingSecret: ""
        htpasswdString: ""
        password: harbor_registry_password
        username: harbor_registry_user
    existingSecret: ""
    existingSecretKey: REGISTRY_HTTP_SECRET
    initContainers: []
    middleware:
        cloudFront:
            baseurl: example.cloudfront.net
            duration: 3000s
            ipfilteredby: none
            keypairid: KEYPAIRID
            privateKeySecret: my-secret
        enabled: false
        type: cloudFront
    nodeSelector: {}
    podAnnotations: {}
    podLabels: {}
    priorityClassName: null
    registry:
        extraEnvVars: []
        image:
            repository: goharbor/registry-photon
            tag: v2.14.0
    relativeurls: false
    replicas: 1
    revisionHistoryLimit: 10
    secret: ""
    serviceAccountName: ""
    tolerations: []
    topologySpreadConstraints: []
    upload_purging:
        age: 168h
        dryrun: false
        enabled: true
        interval: 24h
relizapostgresql:
    auth:
        database: registry
        password: changeit
        username: harbor
    enabled: true
    metrics:
        enabled: false
    primary:
        persistence:
            enabled: true
            size: 8Gi
secretKey: not-a-secure-key
trace:
    enabled: false
    jaeger:
        endpoint: http://hostname:14268/api/traces
    otel:
        compression: false
        endpoint: hostname:4318
        insecure: true
        timeout: 10
        url_path: /v1/traces
    provider: jaeger
    sample_rate: 1
trivy:
    affinity: {}
    automountServiceAccountToken: false
    dbRepository:
        - mirror.gcr.io/aquasec/trivy-db
        - ghcr.io/aquasecurity/trivy-db
    debugMode: false
    enabled: true
    extraEnvVars: []
    gitHubToken: ""
    ignoreUnfixed: false
    image:
        repository: goharbor/trivy-adapter-photon
        tag: v2.14.0
    initContainers: []
    insecure: false
    javaDBRepository:
        - mirror.gcr.io/aquasec/trivy-java-db
        - ghcr.io/aquasecurity/trivy-java-db
    nodeSelector: {}
    offlineScan: false
    podAnnotations: {}
    podLabels: {}
    priorityClassName: null
    replicas: 1
    resources:
        limits:
            cpu: 1
            memory: 1Gi
        requests:
            cpu: 200m
            memory: 512Mi
    securityCheck: vuln
    serviceAccountName: ""
    severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
    skipJavaDBUpdate: false
    skipUpdate: false
    timeout: 5m0s
    tolerations: []
    topologySpreadConstraints: []
    vulnType: os,library
updateStrategy:
    type: RollingUpdate
